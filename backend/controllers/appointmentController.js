
import {
  VisitModel as tblvisit,
  PatientModel as tblpatient,
  DoctorModel as tbldoctor
} from "../config/models.js";
import sequelize from "../config/db.js";

/**
 * GET /appointment/list
 */
const getVisitList = async (req, res) => {
  try {
    const visits = await tblvisit.findAll({
      include: [
        { model: tblpatient, required: true },
        { model: tbldoctor, required: true }
      ]
    });

    const data = visits.map(visit => {
      const patient = visit.tblpatient;
      const doctor  = visit.tbldoctor;

      if (!patient || !doctor) return null;

      const PatientName = `${patient.patientlastname} ${patient.patientfirstname} ${patient.patientpatronymic || ""}`.trim();
      const DoctorName  = `${doctor.doctorlastname} ${doctor.doctorfirstname} ${doctor.doctorpatronymic || ""}`.trim();

      return {
        VisitID:   visit.visitid,
        PatientName,
        DoctorName,
        VisitDate: visit.visitdate,
        VisitTime: visit.visittime
      };
    });

    res.json(data.filter(item => item !== null));
  } catch (err) {
    console.error("Error in getVisitList:", err);
    res.status(500).json({ error: "Internal server error" });
  }
};

/**
 * POST /appointment/visits
 */
const addVisit = async (req, res) => {
  const { patientId, doctorId, visitDate, visitTime } = req.body;

  if (!patientId || !doctorId || !visitDate || !visitTime) {
    return res.status(400).json({ error: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è" });
  }

  try {
    const patient = await tblpatient.findByPk(patientId);
    const doctor  = await tbldoctor.findByPk(doctorId);

    if (!patient) return res.status(404).json({ error: "–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    if (!doctor)  return res.status(404).json({ error: "–í—Ä–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    const conflict = await tblvisit.findOne({
      where: {
        doctorid:  doctorId,
        visitdate: visitDate,
        visittime: visitTime
      }
    });

    if (conflict) {
      return res.status(409).json({
        error: "–í—Ä–∞—á —É–∂–µ –∑–∞–Ω—è—Ç –≤ —ç—Ç–æ –≤—Ä–µ–º—è",
        existingVisit: {
          visitId:   conflict.visitid,
          patientId: conflict.patientid
        }
      });
    }

    const newVisit = await tblvisit.create({
      patientid:  patientId,
      doctorid:   doctorId,
      visitdate:  visitDate,
      visittime:  visitTime
    });

    res.status(201).json({
      message: "–í–∏–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
      visit: {
        visitId:   newVisit.visitid,
        patientId: newVisit.patientid,
        doctorId:  newVisit.doctorid,
        visitDate: newVisit.visitdate,
        visitTime: newVisit.visittime
      }
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑–∏—Ç–∞:", err);
    res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–∑–∏—Ç" });
  }
};

/**
 * DELETE /appointment/visits/:id
 */
const deleteVisit = async (req, res) => {
  const { id } = req.params;
  try {
    const deleted = await tblvisit.destroy({
      where: { visitid: id }
    });
    if (!deleted) {
      return res.status(404).json({ error: "–í–∏–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    res.json({ message: "–í–∏–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–∑–∏—Ç–∞:", err);
    res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∏–∑–∏—Ç" });
  }
};

/**
 * GET /appointment/doctors
 */
const getDoctors = async (req, res) => {
  try {
    console.log("=== [getDoctors] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤—Ä–∞—á–µ–π ===");

    if (!tbldoctor) {
      console.error("–ú–æ–¥–µ–ª—å tbldoctor –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞!");
      return res.status(500).json({ message: "–ú–æ–¥–µ–ª—å –≤—Ä–∞—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." });
    }

    console.log("tbldoctor keys:", Object.keys(tbldoctor));

    if (typeof tbldoctor.findAll !== "function") {
      console.error("–ú–µ—Ç–æ–¥ findAll –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É –º–æ–¥–µ–ª–∏ tbldoctor!");
      return res.status(500).json({ message: "–ú–æ–¥–µ–ª—å –≤—Ä–∞—á–µ–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç findAll." });
    }

    const doctors = await tbldoctor.findAll({
      attributes: ["doctorid", "doctorlastname", "doctorfirstname", "doctorpatronymic"]
    });

    console.log(`–ù–∞–π–¥–µ–Ω–æ –≤—Ä–∞—á–µ–π: ${doctors.length}`);
    console.log("–ü—Ä–∏–º–µ—Ä –≤—Ä–∞—á–∞:", doctors[0]?.toJSON?.());

    const formattedDoctors = doctors.map((doctor) => ({
      doctorid: doctor.doctorid,
      DoctorFullName: `${doctor.doctorlastname} ${doctor.doctorfirstname} ${doctor.doctorpatronymic || ""}`.trim(),
    }));

    res.json(formattedDoctors);
  } catch (err) {
    console.error("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Ä–∞—á–µ–π:");
    console.error(err.stack || err.message || err);
    res.status(500).json({
      message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π.",
      error: err.message,
      stack: err.stack,
    });
  }
};

/**
 * GET /appointment/patients
 */
const getPatients = async (req, res) => {
  try {
    const patients = await tblpatient.findAll({
      attributes: [
        "patientid",
        [
          sequelize.fn(
            "CONCAT",
            sequelize.col("patientlastname"), " ",
            sequelize.col("patientfirstname"), " ",
            sequelize.fn("COALESCE", sequelize.col("patientpatronymic"), "")
          ),
          "PatientFullName"
        ]
      ]
    });
    res.json(patients);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞." });
  }
};

export default {
  getVisitList,
  addVisit,
  deleteVisit,
  getDoctors,
  getPatients
};